package com.example.csproject;

// send up to date string to update game
public class Story {
    String storytext;
    String choices;

    // constructor will initialize the current story given the current event. event will be the first of the new story
    public Story(int event)
    {
        storytext = updateStoryText( event );
    }

    // gets all choices for current event
    public String getChoices(int choiceNum )
    {
        return "";
    }

    // outputs text for current event
    public String getCurrentText(){
        return "";
    }

    // obtains text for output for current story event
    public String updateStoryText( int event )
    {
        return "";
    }
    // updates storyText and available choices based on players choice
    public void progressStory( String playerChoice )
    {
        // update storyText based on the player choice. With enum list, you should be able to call
        // method getCurrentText and getChoices based on the playerChoice.
    }
}
/*
if we consider each story as a series of events where there are multiple stories that all could be considered
once added together, to make up the entire story, we can have our players choices enumerated for easy
verification and the events of the story can be enumerated as well.
Story class can handle obtaining of strings for events and player choices.
Story class can also update the story based on a player choice given.
Should we be uniform in how we pick the direction the choices take you, probably not? We will need
to otherwise verify what choice was made in the current event.
 */
